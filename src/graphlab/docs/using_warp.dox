/**
\page using_warp GraphLab Warp System Tutorial

This tutorial demonstrate the latest feature of GraphLab -- the Warp System.
We encourage you to complete the basic graphlab tutorial before advancing.

The design of the warp system aims to improve the programming interface of
GraphLab by simplyfing the procedure of writing the vertex program without
sacrificing performance. The basic design of the Warp system lies in use of 
fine-grained user-mode threading to hide communication latency of blocking 
calls; and as such expose a more intuitive and easy to use API Interface.

We begin with a simple synthetic example. Say, we have a graph with an 
integer on each vertex, and we would like to compute on each vertex, the total
value of its neighbors.

\code
struct vertex_data {
  int value;
  int neighbor_total;
};

typedef graphlab::distributed_graph<vertex_data, empty> graph_type;
\endcode

The Warp System is included by including the single header

\code
#include <graphlab/warp.hpp>
\endcode

One of the key functions the warp engine provides, is a parfor over all 
vertices, excuting a single function on all vertices.

\code
// Runs the compute_neighborhood_total function on all vertices in the graph
graphlab::warp::parfor_all_vertices(graph, compute_neighborhood_total);

void compute_neighborhood_total(graph_type::vertex_type vertex) {
  ...
}
\endcode

Now, within the compute_neighborhood_total function, we would like to 
compute the sum of the "value" field of all neighboring vertices, and assign
it to the "neighbor_total" value of the current vertex. However, the 
parfor_all_vertices function requires that compute_neighborhood_total only
takes a single argument: the vertex, so how do we get the value of the
neighbors? We use a call to a warp function called warp::map_reduce_neighborhood(),
which allows us to compute an aggregation over the neighborhood of the graph

\code
int gather_value(graph_type::edge_type edge
                 graph_type::vertex_type other /* the other vertex*/ ) {
  return other.value;
}

void combine(int& a, const int& b) {
  a += b;
}

void compute_neighborhood_total(graph_type::vertex_type vertex) {
  vertex.value = graphlab::warp::map_reduce_neighborhood(vertex, ALL_EDGES, gather_value, combine); 
}
\endcode

The warp::map_reduce_neighborhood() function calls the gather_value function
on all adjacent edges of the graph. The return value of the gather_value 
function is then combined using the combine function, and the result returned.
Here, we explicitly defined a combine function, but there is a default combiner 
provided which simply uses +=. As such, in this case, the combiner is in fact, optional,
and the following will work just fine:

\code
void compute_neighborhood_total(graph_type::vertex_type vertex) {
  vertex.value = graphlab::warp::map_reduce_neighborhood(vertex, ALL_EDGES, gather_value); 
}
\endcode

The trick to the Warp System is that in the distributed setting, 
warp::map_reduce_neighborhood() can be a distributed call. However, through 
the use of fine-grained threading (fibers), we can hide the cost of the 
distributed latency by creating thousands of fibers to evaluate the parfor.

In addition to the warp::parfor_all_vertices() function and the warp::map_reduce_neighborhood()
  function we demonstrated, the entire Warp system comprises of 
an asynchronous \ref graphlab::warp_engine "warp engine", which operates similarly
to the asynchronous engine, but allows you to implement an arbitrary function
rather than the restricted Gather-Apply-Scatter model, and 4 basic functions.

- \ref graphlab::warp::parfor_all_vertices() "warp::parfor_all_vertices()"
provides a simple parallel for loop over all vertices in the graph, or in a
given set of vertices. 

- \ref graphlab::warp::map_reduce_neighborhood() "warp::map_reduce_neighborhood()"
allows a map-reduce aggregation of the neighborhood of a vertex to be performed.

- \ref graphlab::warp::transform_neighborhood() "warp::transform_neighborhood()"
allows a parallel transformation of the neighborhood of a vertex to be performed.

- \ref graphlab::warp::broadcast_neighborhood() "warp::broadcast_neighborhood()"
allows a parallel transformation of the neighborhood of a vertex to be performed 
and also provides a warp_engine context.

In this example, we would demonstrate how PageRank can be implemented using
the Warp System in two ways, using the warp::parfor_all_vertices() , 
and using the WarpEngine. the same PageRank application using the
Warp System. See \ref warp for detailed documentation on
the behavior of the  Warp System.

- \subpage using_warp_graph_functions 
- \subpage using_warp_graph_vertex_program 


\page using_warp_graph_functions PageRank with Warp Parfor

  The warp functions provides great flexibility to write simple parallel function on graphs.
  For example, an PageRank program which computes asynchronous 
  sweeps over all vertices, can be written only using warp functions. 

  given a graph with a float on each vertex:

  \code
  typedef graphlab::distributed_graph<float, graphlab::empty> graph_type;
  \endcode

  We use the the parfor_all_vertices to run a pagerank function on all vertices
  \code
    int main(int argc, char** argv) {
      ...
      for (int i = 0; i < NUM_ITER; ++i) {
        // runs the pagerank function on all the vertices in the graph.
        graphlab::warp::parfor_all_vertices(graph, pagerank); 
      }
      ...
    }


    void pagerank(graph_type::vertex_type vertex) {
      ...
    }
  \endcode


  The pagerank function then simply has to use a warp::map_reduce_neighborhood()
  call to compute the weighted sum of then neighborhood's PageRank value.
  Note that here, we use the default combiner (a += operation) to merge the results
  from the pagerank_map function.

  \code
    float pagerank_map(graph_type::edge_type edge, graph_type::vertex_type other) {
      return other.data() / other.num_out_edges();
    }

    void pagerank(graph_type::vertex_type vertex) {
      // computes an aggregate over the neighborhood using map_reduce_neighborhood
      vertex.data() = 0.15 + 0.85 * graphlab::warp::map_reduce_neighborhood(vertex,
                                                                            IN_EDGES,
                                                                            pagerank_map);
    }

  \endcode

  Using c++11 lambda we can further simplify the pagerank function.
  \code
    void pagerank(graph_type::vertex_type vertex) {
    // computes an aggregate over the neighborhood using map_reduce_neighborhood
    vertex.data() = 0.15 + 0.85 * graphlab::warp::map_reduce_neighborhood(vertex,
                                            IN_EDGES,
                                            [](graph_type::edge_type edge, 
                                                graph_type::vertex_type other) { 
                                              return other.data() / other.num_out_edges();
                                            });
    }
  \endcode
  It is important that the C++11 lambda represent
  a regular function pointer, and must not capture a closure. (i.e. you cannot 
  use [=] or [&]).

  If additional parameters must be passed to the mapper or combiner functions,
  an optional "extra argument" can be specified.

  \code
    float pagerank_map(graph_type::edge_type edge, 
                      graph_type::vertex_type other,
                      const float& weight) {
      return 0.85 * other.data() / other.num_out_edges();
    }

    void combiner(float& a, const float& b, const float& other) {
      a += b;
    }

    void pagerank(graph_type::vertex_type vertex) {
      // computes an aggregate over the neighborhood using map_reduce_neighborhood
      vertex.data() = 0.15 + graphlab::warp::map_reduce_neighborhood(vertex,
                                       IN_EDGES,
                                       float(0.85), // this argument will show up as 
                                                    // the 3rd argument in pagerank_map
                                       pagerank_map,
                                       combiner);
    }
  \endcode

\page using_warp_graph_vertex_program PageRank with the Warp Engine
   We use the Warp system to provide a dynamic asynchronous engine, similar in 
   nature to the \ref asynchronous_engine "asynchronous engine", but without
   the Gather-Apply-Scatter limitations. Instead you simply specify an 
   update function. Which is of the type
   \code
     void update_function(engine_type::context& context,
                          graph_type::vertex_type vertex) {
     }
   \endcode

   Within the update function, All blocking warp functions such as 
    warp::map_reduce_neighborhood(),
    warp::transform_neighborhood() and
    warp::broadcast_neighborhood() 
   can be used to make changes to the graph data, and to 
   schedule other vertices for computation.

   \section using_warp_graph_vertex_program_updatefn Pagerank Update Function 

  Given a graph with a float on each vertex:

  \code
  typedef graphlab::distributed_graph<float, graphlab::empty> graph_type;
  \endcode 

  we first define the engine type


  \code
  typedef graphlab::warp::warp_engine<graph_type> engine_type;
  \endcode 

   Now PageRank can be written using the Warp Engine, by defining an update
   function:

   \code

      float pagerank_map(graph_type::edge_type edge, graph_type::vertex_type other) {
        return other.data() / other.num_out_edges();
      }
      
      void signal_neighbor(engine_type::context& context,
                           graph_type::edge_type edge, graph_type::vertex_type other) {
        context.signal(other);
      }


      void pagerank_update_function(engine_type::context& context,
                                    graph_type::vertex_type vertex) {

        // save the old pagerank value
        float oldval = vertex.data();

        // compute the new pagerank using blocking warp function
        vertex.data() = 0.15 + 0.85 *graphlab::warp::map_reduce_neighborhood(vertex,
                                                                    IN_EDGES,
                                                                    pagerank_map);

        // Schedule out edges if we exceed tolerance.
        if (std::fabs(oldval - vertex.data()) > TOLERANCE) {
          graphlab::warp::broadcast_neighborhood(context,
                                       vertex,
                                       OUT_EDGES,
                                       signal_neighbor);
        }
      }
   \endcode

   The broadcast_neighborhood call simply runs the provided function
   (signal_neighbor), on all selected edges (OUT_EDGES) in this case.
   the warp::broadcast_neighborhood() function requires the context to allow the signal_neighbor
   function to perform dynamic scheduling. warp::map_reduce_neighborhood()
   essentially accomplishes the same as the "Gather" function in the GAS model,
   and warp::broadcast_neighborhood() essentially accomplishes the same role as 
   as the Scatter, allowing you to make modifications to the edges on the graph.

   As you can see, the warp engine let you write much simpler vertex update
   function comparing to the vertex_program used in previous versions of
   engines.


   \section using_warp_graph_vertex_program_running Running the Update Function 
    To run the above vertex program on all vertices in the graph \b once, 
    we simply construct an engine in main() (after finalizing the graph)

    \code
    int main(int argc, char** argv) {
      ...

      graphlab::warp::warp_engine<graph_type> engine(dc, graph);
      // sets the update function to use
      engine.set_update_function(pagerank_update_function);
      // signals all vertices to run. warp::warp_engine::signal_vset()
      // can also be used to signal a subset of vertices
      engine.signal_all();
      // run the engine until scheduler is empty.
      engine.start();

      ...
    }
    \endcode

    Just like the asynchronous engine, there are numerous options for the 
    scheduler type, and scheduler capabilities, which we willl not go into great detail here.
*/
